#summary How to compile IMMS on Windows

= Building IMMS on Windows =

IMMS on Windows is a work in progress. The main options are compiling using Cygwin or MinGW. MinGW is preferred as this results in a native executable. Building IMMS under Cygwin means we would have to distribute the cygwin dll(s) along with the IMMS installation, adding an unnecessary dependency.


This has only been tested on Windows XP (SP3).

== Building with MinGW ==

*Note:* if you have both cygwin and mingw installed on your machine this may cause problems, as mingw may pick up some paths from the Windows environment variable. When you launch the MSYS terminal, check your path ('set path'). You may want to change your path to not include anything with cygwin!

See also "MinGW related" at the MinGW FAQ - http://www.mingw.org/wiki/FAQ

*Note:* IMMS on mingw has only been tested for compilation, not running. Still working on that.


*1.* Download mingw, and install the base system with C compiler, the C++ compiler, the fortran compiler, and MSYS. See http://www.mingw.org/wiki/Getting_Started .

*2.* Download the latest msysDTK (MSYS Developer Toolkit) installer exe from http://sourceforge.net/projects/mingw/files/ . Run the exe to install the latest msysDTK package to get a copy of autotools. Note: you may need to run the installer as an Administrator for it to successfully modify C:\WINDOWS\MSYS.INI

When the installer asks you for a path, install to C:\MinGW\msys\1.0 so the tools get added to the same directory as the other msys tools.

Note: we need the msysDTK because it supplies autoconf, and MSYS itself does not ship with autotools. In fact, autoconf is not buildable under the current version of msys - this is the official statement by the maintainer; you will get weird error messages about "The system cannot find the path specified. autom4te: need GNU m4 1.4 or later"). But we need the autoconf tools to create our 'configure' file. Thankfully, one of the mingw authors distributes pre-built versions of the autotools and perl as part of the MSYS Developer Toolkit (or msysDTK).


*3.* Download the IMMS code to a folder inside the Mingw installation, such as ~/imms (i.e. C:\MinGW\msys\1.0\home\{yourusername}\imms , if you installed Mingw to C:\Mingw).

*4.* Open a new MSYS prompt (select 'MinGW Shell' from the Start menu) and cd into the directory with the IMMS code.

*5.* Get ready to download some requirements! :D

*a) zlib* http://www.zlib.net/
 * cd into the folder
 * If you try to run ./configure from mingw you will probably get "Please use win32/Makefile.gcc instead."
 * Do "make -f win32/Makefile.gcc"
 * You will need to add some lines to your path before you can install zlib. Try either of these options. Either way you will run the same make command: 'make install -f win32/Makefile.gcc'

option 1: prepend the path variable before you call make:
>'BINARY_PATH=/mingw/bin INCLUDE_PATH=/mingw/include LIBRARY_PATH=/mingw/lib make install -f win32/Makefile.gcc'

option 2: add the path definitions inside your win32/Makefile.gcc file:

    BINARY_PATH=/mingw/bin
    INCLUDE_PATH=/mingw/include
    LIBRARY_PATH=/mingw/lib

, then install zlib with 'make install -f win32/Makefile.gcc'


*b) sqlite* http://www.sqlite.org/download.html

 * you probably want the 'amalgamation' tar.gz, that contains the configure script and makefile
 * everything should compile fine in mingw with sqlite 3.7.3, but we need to specify different installation paths for the header files and libraries/dlls. Instead of just './configure', run:

./configure includedir=/mingw/include libdir=/mingw/lib

*c) glib.* Before we can actually build glib we need to build some requirements

TODO: it's possible that this could be done with just the Dev files. feel free to try and let the list know how it goes.

*c1) libiconv* (for gettext)

We follow some of the instructions in the 'README.woe32' file, but some are out of date. Remove the '-mno-mingw' flag, since it is no longer supported by cygwin.

   PATH=/mingw/bin:$PATH
   export PATH
   ./configure --host=i586-pc-mingw32 --prefix=/mingw \
     CPPFLAGS="-Wall -I/mingw/include" \
     CFLAGS="-O2 -g" \
     CXXFLAGS="-O2 -g" \
     LDFLAGS="-L/mingw/lib"


*c2) gettext* (for glib) http://www.gnu.org/software/gettext/


Again, we follow only some of the instructions in the 'README.woe32' file. Definitely do *NOT* specify the old GCC version numbers.

   PATH=/mingw/bin:$PATH
   export PATH
   ./configure --prefix=/mingw \     
     CPPFLAGS="-Wall -I/mingw/include" \
     LDFLAGS="-L/mingw/lib"

configuring and making may both take a long time.


PROBLEM: When building gettext I get an error like

  ./libxml/encoding.h:29:19: fatal error: iconv.h: No such file or directory

A: Have you installed libiconv? Build and install that before installing gettext.

PROBLEM: When building gettext I get an error like

    undefined reference to `str_cd_iconveh'

A: If you read the gnu README.woe32 files you will notice that it says gettext and all dependencies have to be built with the same flags. 


*c3) glib* http://www.gtk.org/download-windows.html


You want the latest 'Sources' for glib.
./configure --prefix=/mingw
make
make install


*d) pkg-config.*

./configure --prefix=/mingw
make
make install

*e) pcre* http://sourceforge.net/projects/pcre/files/

your favourite mantra:
./configure
make
make install

TODO: no --prefix=/mingw needed here? try from scratch.

note: if you don't have pkg-config installed first, you might see an error like

"checking for pkg-config... no
checking for pcre... configure: error: PCRE required and missing."

this is actually an error with pkg-config, not pcre. to fix, install pkg-config first.

*f) fftw*

It's no problem! Wonderful fftw users have already practised compiling under mingw :)

- Download from http://www.fftw.org/download.html
- View the mingw steps on http://www.fftw.org/install/windows.html

Basically we use their recommended switches and add our prefix

    ./configure --with-our-malloc16 --with-windows-f77-mangling --enable-shared --disable-static --enable-threads --with-combined-threads --enable-portable-binary --enable-sse2 --prefix=/mingw
    make
    make install

making fftw may take a while.

*g) torch*

We're using torch3 - download from http://www.torch.ch/downloads.php

*Note:* getting torch compiled is a bit tricky. This uses the source code and gnu make options. It may be easier to try xmake, but that involves installing python; it may be easier to build with visual c++ as well, but that requires visual c++. Feel free to experiment and ping the list with your results.


Torch doesn't compile on mingw by default; we get to edit the makefile. To fix the makefiles you have two choices:
- Edit the makefiles and change "OS := $(shell uname -s)" to "OS := Linux". This will need to be done in each subdirectory where you want to build Torch components (in our case: 'core', 'distributions', and 'gradients').
- Copy the "Makefile_options_Linux" makefile and rename it to "Makefile_options_MINGW32_NT-5.1"
  (where "MINGW32_NT-5.1" is the name reported by 'uname -s' in your MSYS terminal). This will need to be done in each subdirectory where you want to build Torch components (in our case: 'core', 'distributions', and 'gradients').

(I have contacted the Torch owners to see if they will accept a patch in the form of a mingw makefile. We'll see)


For this guide we'll be doing the second option.

- Next, change all of the lines in the Makefiles that read "@\rm -Rf to "@rm -Rf". These are mostly in the 'clean:' directive. If you leave in the '\', make will give you errors like "	make[1]: \rm: Command not found". This will need to be done in each subdirectory where you want to build Torch components ('core', 'distributions', and 'gradients').
- Also change all lines that read "@\mkdir" to "@mkdir", or you'll get the same error. These are mostly in the "depend:" section. This also has to be done in each file.

- Next, edit the Makefile_options_g++ file(s):
    - Remove the "-mcpu=i686" flag from CFLAGS_OPT_DOUBLE and CFLAGS_OPT_DOUBLE. otherwise gcc will tell you "-mcpu is deprecated".
    - Add the proper include directory to MYINCS; in this case "MYINCS = -I/mingw/include". TODO: may change if our directories change. try from scratch.

- Edit the Makefile_options_MINGW32_NT-5.1 file (or Makefile_options_Linux file):
    - Remove the "-mcpu=i686" flag from CFLAGS_OPT_DOUBLE and CFLAGS_OPT_DOUBLE.
    - Add the proper include directory to MYINCS; in this case "MYINCS = -I/mingw/include". TODO: may change if our directories change.
    - Change the PACKAGES line to include the extra packages we need for IMMS: "PACKAGES = distributions gradients".


- HACK: currently Torch3/core/Timer.cc doesn't compile because it needs some functions in sys/time.h, which are not provided by MinGW. Fortunately, we don't use any Timer stuff inside IMMS (TODO: right?), so we can work around this rather than fixing it. Because of the way the Torch makefiles work, if you remove the Timer.cc file or rename it to something other than '.cc', Torch will ignore it. So do that now.
Long term: we could try using gnulib to patch in support for the needed functions. That's a lot for something we don't use though.


- We should now be ready. Build torch by running 'make depend' and then 'make'. They may take a while.
- Torch3 doesn't have a 'make install' option, so we get to install the files ourselves :P (Note: I have contacted the owners to see if they will accept a patch for this too).
    - Copy the header files from the 'core' (except Timer.h :P), 'distributions', and 'gradients' folders to /mingw/include/torch/ (C:\MinGW\include\torch on Windows).
    - Copy the compiled 'libtorch.a' library file from Torch3/libl/MINGW32_NT-5.1_OPT_FLOAT (or Torch3/liblLinux_OPT_FLOAT, if you used the Linux makefile) (or Torch3/lib/Linux_OPT_FLOAT, if you used the Linux makefile) to /mingw/lib (C:\MinGW\lib in Windows).


*h) sox* http://sox.sourceforge.net/

Easy. Grab the source code, then your favourite mantra

./configure
make -s (-s is specified in the INSTALL doc)
make install

... other prereqs coming soon ...

*6.* Finally! Configure and make imms

./configure
make

*Note:* There are numerous problems with building IMMS natively on Windows. These problems are still being addressed. More to come soon...


=== Troubleshooting on MinGW ===

MinGW Troubleshooting

*Q: SQLite won't compile! All it says is "make: *** [sqlite3.lo] Error 1"*

*A:* Did anything weird happen when configuring? Check your configure output, and/or your configure.log. In particular you may see messages like "Bad file number".

Note: if you have both cygwin and mingw installed on your machine this may cause problems, as mingw may pick up some paths from the Windows environment variable. When you launch the MSYS terminal, check your path ('set path'). You may want to change your path to not include anything with cygwin!

 
*Q: When compiling autoconf I get weird messages like "The system cannot find the path specified. autom4te: need GNU m4 1.4 or later". What gives?*

*A:* Autoconf is not buildable from source under msys or mingw. This is the official statement from the maintainer. Don't try to compile autoconf or m4 yourself - instead, download the msysDTK ("Developer Tool Kit") from  http://sourceforge.net/projects/mingw/files/ and install it to get a copy of autoconf (see instructions above).

*Q: When running ./configure for IMMS I get messages like "possibly undefined macro: PKG_CONFIG_LIBDIR", "possibly undefined macro: AC_MSG_ERROR", or "syntax error near unexpected token `pcre,' `PKG_CHECK_MODULES(pcre, libpcre, , with_pcre=no)'".*

*A:* This is an issue with autotools not finding the right m4 macros, similar to the entry in the FAQ http://imms.luminal.org/faq#TOC-I-get-an-error-about-undefined-macr . Because we have been installing things to /mingw and the autotools only look in /usr/local by default, we need to tell them about it (TODO: may be easier to just build everything in /usr/local?) . Unfortunately each autotool has a different syntax, but you can fix this by calling them with

autoheader --include=/mingw
aclocal -I /mingw
autoconf --include=/mingw

TODO: either avoid this or patch the -I into the makefile if uname matches mingw?



== Building with Cygwin ==

If you like you can also compile IMMS under Cygwin. This is easier than MinGW because cygwin supplies many POSIX-expected functions, files, and libraries. However, the resulting IMMS programs depend on the Cygwin .dlls to run; for this reason Cygwin builds are unofficial and will not be distributed through the IMMS website.

TODO: transfer cygwin stuff here from http://imms.luminal.org/download/immswindowscygwin .