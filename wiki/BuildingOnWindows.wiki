#summary How to compile IMMS on Windows

= Building IMMS on Windows =

IMMS on Windows is a work in progress. The main options are compiling using Cygwin or MinGW. MinGW is preferred as this results in a native executable. Building IMMS under Cygwin means we would have to distribute the cygwin dll(s) along with the IMMS installation, adding an unnecessary dependency.


This has only been tested on Windows XP (SP3).

== Building with MinGW ==

*Note:* if you have both cygwin and mingw installed on your machine this may cause problems, as mingw may pick up some paths from the Windows environment variable. When you launch the MSYS terminal, check your path ('set path'). You may want to change your path to not include anything with cygwin!

See also "MinGW related" at the MinGW FAQ - http://www.mingw.org/wiki/FAQ

*Note:* IMMS on mingw has only been tested for compilation, not running. Still working on that.


1. Download mingw, and install the base system with C compiler, the C++ compiler, the fortran compiler, and MSYS. See http://www.mingw.org/wiki/Getting_Started .

2. Download the IMMS code to a folder inside the Mingw installation, such as ~/imms (i.e. C:\MinGW\msys\1.0\home\[yourusername]\imms , if you installed Mingw to C:\Mingw).

3. Open a new MSYS prompt (select 'MinGW Shell' from the Start menu) and cd into the directory with the IMMS code.

4. Get ready to download some requirements! :D

a) autoconf - We need this so we can make the IMMS 'configure' file. However, autoconf itself has several requirements, so we will need to build them first.

a1) GNU m4. We need this to build autoconf.

Download from http://www.gnu.org/software/m4/m4.html - you will want the file called m4-latest.tar.gz .

Build m4 with the following commands:

./configure --prefix=/mingw
make
make install


We say '--prefix=/mingw' because that's where mingw stores all of its binaries, header files, and libraries (i.e. /mingw/bin, /mingw/include, and /mingw/lib).

a2) perl. We need this to build autoconf too

TODO: I installed strawberry perl under Windows, into C:\strawberry , and this was picked up as okay by mingw. Do we need to do it another way?

http://strawberryperl.com/

Strawberry perl has a GUI installer that you can run from Windows.


a3) autoconf itself

Strange that MSYS doesn't ship with this; I guess they really are minimal. But we'll have to build it to create our 'configure' file
http://www.gnu.org/software/autoconf/

Grab autoconf-latest.tar.gz

./configure
make TODO: gives errors :'(
make install



b) zlib http://www.zlib.net/
 * cd into the folder
 * If you try to run ./configure from mingw you will probably get "Please use win32/Makefile.gcc instead."
 * Do "make -f win32/Makefile.gcc"
 * You will need to add some lines to your path before you can install zlib. Try either of these options. Either way you will run the same make command: 'make install -f win32/Makefile.gcc'

option 1: prepend the path variable before you call make:
>'BINARY_PATH=/mingw/bin INCLUDE_PATH=/mingw/include LIBRARY_PATH=/mingw/lib make install -f win32/Makefile.gcc'

option 2: add the path definitions inside your win32/Makefile.gcc file:

    BINARY_PATH=/mingw/bin
    INCLUDE_PATH=/mingw/include
    LIBRARY_PATH=/mingw/lib

, then install zlib with 'make install -f win32/Makefile.gcc'


c) sqlite http://www.sqlite.org/download.html

 * you probably want the 'amalgamation' tar.gz, that contains the configure script and makefile
 * everything should compile fine in mingw with sqlite 3.7.3, but we need to specify different installation paths for the header files and libraries/dlls. Instead of just './configure', run:

./configure includedir=/mingw/include libdir=/mingw/lib

d) glib. Before we can actually build glib we need to build some requirements

TODO: it's possible that this could be done with just the Dev files. feel free to try and let the list know how it goes.

d1) libiconv (for gettext)

We follow some of the instructions in the 'README.woe32' file, but some are out of date. Remove the '-mno-mingw' flag, since it is no longer supported by cygwin.

   PATH=/mingw/bin:$PATH
   export PATH
   ./configure --host=i586-pc-mingw32 --prefix=/mingw \
     CPPFLAGS="-Wall -I/mingw/include" \
     CFLAGS="-O2 -g" \
     CXXFLAGS="-O2 -g" \
     LDFLAGS="-L/mingw/lib"


d2) gettext (for glib) http://www.gnu.org/software/gettext/


Again, we follow only some of the instructions in the 'README.woe32' file. Definitely do *NOT* specify the old GCC version numbers.

   PATH=/mingw/bin:$PATH
   export PATH
   ./configure --prefix=/mingw \     
     CPPFLAGS="-Wall -I/mingw/include" \
     LDFLAGS="-L/mingw/lib"

configuring and making may both take a long time.


PROBLEM: When building gettext I get an error like

  ./libxml/encoding.h:29:19: fatal error: iconv.h: No such file or directory

A: Have you installed libiconv? Build and install that before installing gettext.

PROBLEM: When building gettext I get an error like

    undefined reference to `str_cd_iconveh'

A: If you read the gnu README.woe32 files you will notice that it says gettext and all dependencies have to be built with the same flags. 


d3) glib http://www.gtk.org/download-windows.html


You want the latest 'Sources' for glib.
./configure --prefix=/mingw
make
make install


e) pkg-config.

./configure --prefix=/mingw
make
make install

f) pcre http://sourceforge.net/projects/pcre/files/

your favourite mantra:
./configure
make
make install

TODO: no --prefix=/mingw needed here? try from scratch.

note: if you don't have pkg-config installed first, you might see an error like

"checking for pkg-config... no
checking for pcre... configure: error: PCRE required and missing."

this is actually an error with pkg-config, not pcre. to fix, install pkg-config first.

g) fftw

It's no problem! Wonderful fftw users have already practised compiling under mingw :)

- Download from http://www.fftw.org/download.html
- View the mingw steps on http://www.fftw.org/install/windows.html

Basically we use their recommended switches and add our prefix

    ./configure --with-our-malloc16 --with-windows-f77-mangling --enable-shared --disable-static --enable-threads --with-combined-threads --enable-portable-binary --enable-sse2 --prefix=/mingw
    make
    make install

making fftw may take a while.

h) torch

We're using torch3 - download from http://www.torch.ch/downloads.php

TODO: getting torch compiled is a bit tricky. This uses the source code and gnu make options. It may be easier to try xmake, but that involves installing python; it may be easier to build with visual c++ as well, but that requires visual c++. feel free to experiment and ping the list.


- lots of makefile edits, mainly to remove preceding '\'s. see log.
- TODO: see other things in log
- We need 'MYINCS = -I/mingw/include'
- TODO: remove that other 'march' flag
- for IMMS we need 'PACKAGES = distributions gradients' (for KMeans and what?)
TODO: torch has no 'make install' option? can we send them a patch?
TODO: write a makefile for mingw too. see if torch3 will accept it (or if they've abandoned that project)
TODO: why does 'uname -s' show something very long on mingw? ask mingw about that.

To install torch, copy all of the header files from 'core', 'packages', and 'gradients' into /mingw/include. Copy the library file it compiles (probably lib\Linux_OPT_FLOAT\libtorch.a) to /mingw/lib

i) sox http://sox.sourceforge.net/

Easy. Grab the source code, then your favourite mantra

./configure
make -s (-s is specified in the INSTALL doc)
make install

... other prereqs coming soon ...

5. Finally! Configure and make imms

./configure
make

*Note:* There are numerous problems with building IMMS natively on Windows. These problems are still being addressed. More to come soon...



== Building with Cygwin ==

If you like you can also compile IMMS under Cygwin. This is easier than MinGW because cygwin supplies many POSIX-expected functions, files, and libraries. However, the resulting IMMS programs depend on the Cygwin .dlls to run; for this reason Cygwin builds are unofficial and will not be distributed through the IMMS website.

TODO: transfer cygwin stuff here from http://imms.luminal.org/download/immswindowscygwin .